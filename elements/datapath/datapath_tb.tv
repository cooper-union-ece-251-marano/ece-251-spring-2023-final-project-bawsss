//rst_regWrite_regDst_memToReg_jump_aluSrc_pcSrc_aluCtrl_instruction_readData___expectedAluResult_expectedMemWriteData_expectedPc_expectedZero

//reset pc and regfile
0_0_00_00_00_00_0_000_0000_0000___0000_0000_XXXX_1
1_0_00_00_00_00_0_000_0000_0000___0000_0000_0000_1
1_1_00_00_00_00_0_000_0000_0000___0000_0000_0000_1

//reset pc and test pc
1_0_00_00_00_00_0_000_0000_0000___0000_0000_0000_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_0002_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_0004_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_0006_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_0008_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_000A_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_000C_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_000E_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_0010_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_0012_1

// store word into registers and then add them
1_0_00_00_00_00_0_000_0000_0000___0000_0000_0000_1
0_0_00_00_00_00_0_000_0000_0000___0000_0000_0002_1
// j 0x2
0_0_00_00_01_00_0_010_E002_0000___0000_0000_0004_1

1_0_00_00_00_00_0_000_0000_0000___0000_0000_0000_1
// addi rt, rs, amt
// -> op|rs|rt|amt|
// addi $a0, $zero, 7
// addi $a0, $a0, 3
// result = 10
0_1_00_00_00_01_0_010_a047_0000___0007_XXXX_0002_0
0_1_00_00_00_01_0_010_a443_0000___000a_0007_0004_0